{"/home/travis/build/npmtest/node-npmtest-generator-express/test.js":"/* istanbul instrument in package npmtest_generator_express */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-express/lib.npmtest_generator_express.js":"/* istanbul instrument in package npmtest_generator_express */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_generator_express = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_generator_express = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-express/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-generator-express && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_generator_express */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_generator_express\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_generator_express.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_generator_express.rollup.js'] =\n            local.assetsDict['/assets.npmtest_generator_express.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_generator_express.__dirname + '/lib.npmtest_generator_express.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-express/node_modules/generator-express/app/index.js":"'use strict';\nvar path = require('path');\nvar Generator = require('yeoman-generator');\nvar glob = require('glob');\nvar slugify = require('underscore.string/slugify');\nvar mkdirp = require('mkdirp');\n\nmodule.exports = Generator.extend({\n  constructor: function () {\n    Generator.apply(this, arguments);\n\n    // add option to skip install\n    this.option('skip-install');\n\n    this.slugify = slugify;\n  },\n  prompting: {\n    dir: function () {\n\n      if (this.options.createDirectory !== undefined) {\n        return true;\n      }\n\n      var prompt = [{\n        type: 'confirm',\n        name: 'createDirectory',\n        message: 'Would you like to create a new directory for your project?'\n      }];\n\n      return this.prompt(prompt).then(function (response) {\n        this.options.createDirectory = response.createDirectory;\n      }.bind(this));\n    },\n    dirname: function () {\n      if (!this.options.createDirectory || this.options.dirname) {\n        return true;\n      }\n\n      var prompt = [{\n        type: 'input',\n        name: 'dirname',\n        message: 'Enter directory name'\n      }];\n\n      return this.prompt(prompt).then(function (response) {\n        this.options.dirname = response.dirname;\n      }.bind(this));\n    },\n    type: function () {\n      // Short circuit if an option was explicitly specified\n      if (this.options.mvc || this.options.basic) {\n        return true;\n      }\n\n      var prompt = [{\n        type: 'list',\n        name: 'type',\n        message: 'Select a version to install:',\n        choices: [\n          'Basic',\n          'MVC'\n        ],\n        store: true\n      }];\n\n      return this.prompt(prompt).then(function (responses) {\n        this.options.mvc = responses.type.match(/^MVC$/i) !== null;\n      }.bind(this));\n    },\n    viewEngine: function () {\n\n      if (this.options.viewEngine) {\n        return true;\n      }\n\n      var prompt = [{\n        type: 'list',\n        name: 'viewEngine',\n        message: 'Select a view engine to use:',\n        choices: [\n          'Jade',\n          'Swig',\n          'EJS',\n          'Handlebars',\n          'Marko',\n          'Nunjucks'\n        ],\n        store: true\n      }];\n\n      return this.prompt(prompt).then(function (response) {\n        this.options.viewEngine = response.viewEngine.toLowerCase();\n      }.bind(this));\n    },\n    cssPreprocessor: function () {\n\n      if (this.options.cssPreprocessor) {\n        return true;\n      }\n\n      var prompt = [{\n        type: 'list',\n        name: 'cssPreprocessor',\n        message: 'Select a css preprocessor to use (Sass Requires Ruby):' ,\n        choices: [\n          'None',\n          'Node-Sass',\n          'Sass',\n          'less',\n          'Stylus'\n        ],\n        store: true\n      }];\n\n      return this.prompt(prompt).then(function (response) {\n        this.options.cssPreprocessor = response.cssPreprocessor.toLowerCase();\n      }.bind(this));\n    },\n    database: function () {\n\n      if (this.options.database || !this.options.mvc) {\n        return true;\n      }\n\n      var prompt = [{\n        type: 'list',\n        name: 'database',\n        message: 'Select a database to use:',\n        choices: [\n          'None',\n          'MongoDB',\n          'MySQL',\n          'PostgreSQL',\n          'RethinkDB',\n          'SQLite'\n        ],\n        store: true\n      }];\n\n      return this.prompt(prompt).then(function (response) {\n        this.options.database = response.database.toLowerCase();\n      }.bind(this));\n    },\n    buildTool: function () {\n\n      if (this.options.buildTool) {\n        return true;\n      }\n\n      var prompt = [{\n        type: 'list',\n        name: 'buildTool',\n        message: 'Select a build tool to use:',\n        choices: [\n          'Grunt',\n          'Gulp'\n        ],\n        store: true\n      }];\n\n      return this.prompt(prompt).then(function (response) {\n        this.options.buildTool = response.buildTool.toLowerCase();\n      }.bind(this));\n\n    }\n  },\n  writing: {\n    buildEnv: function () {\n\n      // create directory\n      if(this.options.createDirectory){\n        this.destinationRoot(this.options.dirname);\n        this.appname = this.options.dirname;\n      }\n\n      var name = this.options.mvc ? 'mvc' : 'basic';\n      var suffix = this.options.coffee ? '-coffee' : '';\n      this.filetype = this.options.coffee ? 'coffee' : 'js';\n\n      // shared across all generators\n      this.sourceRoot(path.join(__dirname, 'templates', 'shared'));\n      glob.sync('**', { cwd: this.sourceRoot() }).map(function (file) {\n        this.fs.copyTpl(this.templatePath(file), this.destinationPath(file.replace(/^_/, '')), this);\n      }, this);\n\n\n      // shared for mvc/basic generators\n      this.sourceRoot(path.join(__dirname, 'templates', name + '-shared'));\n      this.fs.copyTpl(this.templatePath('.'), this.destinationPath('.'), this);\n\n      // mvc tests\n      var supported = [\n        'mysql',\n        'postgresql',\n        'rethinkdb',\n        'sqlite'\n      ];\n      if (this.options.mvc && supported.indexOf(this.options.database) !== -1) {\n        this.sourceRoot(path.join(__dirname, 'templates', 'mvc-test'));\n        this.fs.copyTpl(this.templatePath('.'), this.destinationPath('test'), this);\n      }\n\n      // templates\n      this.sourceRoot(path.join(__dirname, 'templates', name + suffix));\n      this.fs.copyTpl(this.templatePath('.'), this.destinationPath('.'), this);\n\n      // views\n      var views = this.options.viewEngine;\n      this.sourceRoot(path.join(__dirname, 'templates', 'views', views));\n      if (this.options.mvc) {\n        if (this.options.viewEngine == 'ejs') {\n          this.fs.copy(this.templatePath('.'), this.destinationPath('app/views'));\n        } else {\n          this.fs.copyTpl(this.templatePath('.'), this.destinationPath('app/views'), this);\n        }\n      } else {\n        if (this.options.viewEngine == 'ejs') {\n          this.fs.copy(this.templatePath('.'), this.destinationPath('views'));\n        } else {\n          this.fs.copyTpl(this.templatePath('.'), this.destinationPath('views'), this);\n        }\n      }\n\n      // css\n      var stylesheets = this.options.cssPreprocessor;\n      if(stylesheets === 'none') stylesheets = 'css';\n      if(stylesheets === 'node-sass') stylesheets = 'sass';\n      this.sourceRoot(path.join(__dirname, 'templates', 'css', stylesheets));\n      this.fs.copyTpl(this.templatePath('.'), this.destinationPath('public/css'), this);\n\n      // grunt/gulp\n      var buildFile = this.options.buildTool === 'grunt' ? 'Gruntfile.js' : 'gulpfile.js';\n      this.fs.copyTpl(this.templatePath(path.join(__dirname, 'templates', 'extras', name + '-shared', buildFile)), this.destinationPath(buildFile), this);\n\n      // sequelize extra stuff\n      if (this.options.database === 'mysql' ||\n          this.options.database === 'postgresql' ||\n          this.options.database === 'sqlite') {\n        this.fs.copyTpl(this.templatePath(path.join(__dirname, 'templates', 'extras', name + suffix, 'sequelize-model-index.' + this.filetype)), this.destinationPath('app/models/index.' + this.filetype), this);\n      }\n\n      //thinky extra stuff\n      if (this.options.database === 'rethinkdb') {\n        this.fs.copyTpl(this.templatePath(path.join(__dirname, 'templates', 'extras', name + suffix, 'thinky-model-index.' + this.filetype)), this.destinationPath('app/models/index.' + this.filetype), this);\n        this.fs.copyTpl(this.templatePath(path.join(__dirname, 'templates', 'extras', name + suffix, 'thinky-config.' + this.filetype)), this.destinationPath('config/thinky.' + this.filetype), this);\n      }\n\n    },\n    assetsDirs: function () {\n      mkdirp.sync('public');\n      mkdirp.sync('public/components');\n      mkdirp.sync('public/js');\n      mkdirp.sync('public/css');\n      mkdirp.sync('public/img');\n      if (this.options.database == 'sqlite') {\n        mkdirp.sync('data');\n      }\n    }\n  },\n  install: function () {\n    if (!this.options['skip-install']) this.installDependencies();\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-generator-express/node_modules/generator-express/temp/two/app.js":"\n\nvar express = require('express'),\n  config = require('./config/config'),\n  db = require('./app/models');\n\nvar app = express();\n\nmodule.exports = require('./config/express')(app, config);\n\ndb.sequelize\n  .sync()\n  .then(function () {\n    if (!module.parent) {\n      app.listen(config.port, function () {\n        console.log('Express server listening on port ' + config.port);\n      });\n    }\n  }).catch(function (e) {\n    throw new Error(e);\n  });\n\n","/home/travis/build/npmtest/node-npmtest-generator-express/node_modules/generator-express/temp/two/gulpfile.js":"var gulp = require('gulp'),\n  nodemon = require('gulp-nodemon'),\n  plumber = require('gulp-plumber'),\n  livereload = require('gulp-livereload');\n\n\ngulp.task('develop', function () {\n  livereload.listen();\n  nodemon({\n    script: 'app.js',\n    ext: 'js coffee handlebars',\n    stdout: false\n  }).on('readable', function () {\n    this.stdout.on('data', function (chunk) {\n      if(/^Express server listening on port/.test(chunk)){\n        livereload.changed(__dirname);\n      }\n    });\n    this.stdout.pipe(process.stdout);\n    this.stderr.pipe(process.stderr);\n  });\n});\n\ngulp.task('default', [\n  'develop'\n]);\n","/home/travis/build/npmtest/node-npmtest-generator-express/node_modules/generator-express/app/templates/basic-shared/app.js":"<% if(options.coffee){ %>require('coffee-script/register');<% } %>\n\nvar express = require('express');\nvar path = require('path');\nvar favicon = require('serve-favicon');\nvar logger = require('morgan');\nvar cookieParser = require('cookie-parser');\nvar bodyParser = require('body-parser');<% if(options.viewEngine == 'swig'){ %>\nvar swig = require('swig');<% } %><% if(options.viewEngine == 'handlebars'){ %>\nvar exphbs  = require('express-handlebars');<% } %><% if(options.viewEngine == 'nunjucks'){ %>\nvar nunjucks = require('nunjucks');<% } %>\n\nvar routes = require('./routes/index');\nvar users = require('./routes/user');\n\nvar app = express();\n\nvar env = process.env.NODE_ENV || 'development';\napp.locals.ENV = env;\napp.locals.ENV_DEVELOPMENT = env == 'development';\n\n// view engine setup\n<% if(options.viewEngine == 'swig'){ %>app.engine('swig', swig.renderFile)\napp.set('view cache', false);\nswig.setDefaults({ cache: false });<% } %><% if(options.viewEngine == 'handlebars'){ %>\napp.engine('handlebars', exphbs({\n  defaultLayout: 'main',\n  partialsDir: ['views/partials/']\n}));<% } %><% if(options.viewEngine != 'marko'){ %>\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', '<%= options.viewEngine %>');<% } %><% if(options.viewEngine == 'nunjucks'){ %>\nnunjucks.configure('views', {\n    autoescape: true,\n    express: app\n});<% } %>\n\n// app.use(favicon(__dirname + '/public/img/favicon.ico'));\napp.use(logger('dev'));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({\n  extended: true\n}));\napp.use(cookieParser());\napp.use(express.static(path.join(__dirname, 'public')));\n\napp.use('/', routes);\napp.use('/users', users);\n\n/// catch 404 and forward to error handler\napp.use(function(req, res, next) {\n    var err = new Error('Not Found');\n    err.status = 404;\n    next(err);\n});\n\n/// error handlers\n\n// development error handler\n// will print stacktrace\n<% if(options.viewEngine == 'marko'){ %>\n  var errorTemplate = require('marko').load(require.resolve('./views/error.marko'));<% } %>\nif (app.get('env') === 'development') {\n    app.use(function(err, req, res, next) {\n        res.status(err.status || 500);<% if(options.viewEngine == 'marko'){ %>\n        errorTemplate.render({\n          message: err.message,\n          error: err,\n          title: 'error'\n        }, res);<% } else { %>\n        res.render('error', {\n            message: err.message,\n            error: err,\n            title: 'error'\n        });<% } %>\n    });\n}\n\n// production error handler\n// no stacktraces leaked to user\napp.use(function(err, req, res, next) {\n    res.status(err.status || 500);<% if(options.viewEngine == 'marko'){ %>\n    errorTemplate.render({\n      message: err.message,\n      error: err,\n      title: 'error'\n    }, res);<% } else { %>\n    res.render('error', {\n        message: err.message,\n        error: {},\n        title: 'error'\n    });<% } %>\n});\n\n\nmodule.exports = app;\n","/home/travis/build/npmtest/node-npmtest-generator-express/node_modules/generator-express/app/templates/mvc-shared/app.js":"<% if(options.coffee){ %>require('coffee-script/register');<% } %>\n\nvar express = require('express'),\n  config = require('./config/config')<% if(options.database == 'none'){ %>;<% } %><% if(options.database == 'mongodb'){ %>,\n  glob = require('glob'),\n  mongoose = require('mongoose');<% } %><% if(options.database == 'mysql' || options.database == 'postgresql' || options.database == 'sqlite'){ %>,\n  db = require('./app/models');<% } %>\n<% if(options.database == 'mongodb'){ %>\nmongoose.connect(config.db);\nvar db = mongoose.connection;\ndb.on('error', function () {\n  throw new Error('unable to connect to database at ' + config.db);\n});\n\nvar models = glob.sync(config.root + '/app/models/*.<%= filetype %>');\nmodels.forEach(function (model) {\n  require(model);\n});<% } %>\nvar app = express();\n\nmodule.exports = require('./config/express')(app, config);\n<% if(options.database == 'mysql' ||\n  options.database == 'postgresql' ||\n  options.database == 'sqlite'){ %>\ndb.sequelize\n  .sync()\n  .then(function () {\n    if (!module.parent) {\n      app.listen(config.port, function () {\n        console.log('Express server listening on port ' + config.port);\n      });\n    }\n  }).catch(function (e) {\n    throw new Error(e);\n  });\n<% } else { %>\napp.listen(config.port, function () {\n  console.log('Express server listening on port ' + config.port);\n});\n<% } %>\n","/home/travis/build/npmtest/node-npmtest-generator-express/node_modules/generator-express/temp/two/config/config.js":"var path = require('path'),\n    rootPath = path.normalize(__dirname + '/..'),\n    env = process.env.NODE_ENV || 'development';\n\nvar config = {\n  development: {\n    root: rootPath,\n    app: {\n      name: 'two'\n    },\n    port: process.env.PORT || 3000,\n    db: 'sqlite://localhost/two-development',\n    storage: rootPath + '/data/two-development'\n  },\n\n  test: {\n    root: rootPath,\n    app: {\n      name: 'two'\n    },\n    port: process.env.PORT || 3000,\n    db: 'sqlite://localhost/two-test',\n    storage: rootPath + '/data/two-test'\n  },\n\n  production: {\n    root: rootPath,\n    app: {\n      name: 'two'\n    },\n    port: process.env.PORT || 3000,\n    db: 'sqlite://localhost/two-production',\n    storage: rootPath + 'data/two-production'\n  }\n};\n\nmodule.exports = config[env];\n","/home/travis/build/npmtest/node-npmtest-generator-express/node_modules/generator-express/temp/two/config/express.js":"var express = require('express');\nvar glob = require('glob');\n\nvar favicon = require('serve-favicon');\nvar logger = require('morgan');\nvar cookieParser = require('cookie-parser');\nvar bodyParser = require('body-parser');\nvar compress = require('compression');\nvar methodOverride = require('method-override');\nvar exphbs  = require('express-handlebars');\n\nmodule.exports = function(app, config) {\n  var env = process.env.NODE_ENV || 'development';\n  app.locals.ENV = env;\n  app.locals.ENV_DEVELOPMENT = env == 'development';\n  \n  app.engine('handlebars', exphbs({\n    layoutsDir: config.root + '/app/views/layouts/',\n    defaultLayout: 'main',\n    partialsDir: [config.root + '/app/views/partials/']\n  }));\n  app.set('views', config.root + '/app/views');\n  app.set('view engine', 'handlebars');\n\n  // app.use(favicon(config.root + '/public/img/favicon.ico'));\n  app.use(logger('dev'));\n  app.use(bodyParser.json());\n  app.use(bodyParser.urlencoded({\n    extended: true\n  }));\n  app.use(cookieParser());\n  app.use(compress());\n  app.use(express.static(config.root + '/public'));\n  app.use(methodOverride());\n\n  var controllers = glob.sync(config.root + '/app/controllers/*.js');\n  controllers.forEach(function (controller) {\n    require(controller)(app);\n  });\n\n  app.use(function (req, res, next) {\n    var err = new Error('Not Found');\n    err.status = 404;\n    next(err);\n  });\n  \n  if(app.get('env') === 'development'){\n    app.use(function (err, req, res, next) {\n      res.status(err.status || 500);\n      res.render('error', {\n        message: err.message,\n        error: err,\n        title: 'error'\n      });\n    });\n  }\n\n  app.use(function (err, req, res, next) {\n    res.status(err.status || 500);\n      res.render('error', {\n        message: err.message,\n        error: {},\n        title: 'error'\n      });\n  });\n\n  return app;\n};\n"}